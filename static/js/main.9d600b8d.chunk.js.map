{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","motion","div","style","width","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","map","key","layout","whileHover","opacity","onClick","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d600b8d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>Reactllery</h1>\n      <h2>Your memories</h2>\n      <p>Because an image says more than a thousand words...</p>\n      <p>Try uploading your memories ;)</p>\n    </div>\n  )\n}\n\nexport default Title;","import firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAHBDxKl7d3ygkUok4PidgBhQz3Q7fefiA\",\r\n    authDomain: \"reactllery.firebaseapp.com\",\r\n    projectId: \"reactllery\",\r\n    storageBucket: \"reactllery.appspot.com\",\r\n    messagingSenderId: \"549732659146\",\r\n    appId: \"1:549732659146:web:687dff529e3dac2524a933\"\r\n};\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport {projectStorage, projectFirestore, timestamp};","import { useState, useEffect } from \"react\";\r\nimport {projectStorage, projectFirestore, timestamp} from \"../firebase/config\"\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const[url, setUrl] = useState(null);\r\n    useEffect(() => {\r\n        //references\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection(\"images\");\r\n\r\n        storageRef.put(file).on(\"state_changed\", (snap) =>{\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n\r\n        }, (err) => {\r\n            setError(err)\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({url, createdAt});\r\n            setUrl(url);\r\n        })\r\n    }, [file])\r\n\r\n    return {progress, url, error};\r\n}\r\n\r\nexport default useStorage;","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage'\r\nimport {motion} from \"framer-motion\";\r\n\r\nconst ProgressBar = ({file, setFile}) => {\r\n\r\n    const {url, progress} = useStorage(file);\r\n\r\n    useEffect(() => {\r\n        if (url) {\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile])\r\n\r\n    return(\r\n        <motion.div className = \"progress-bar\" style = {{width: progress + \"%\"}}>\r\n            initial = {{width: 0}}\r\n            animate = {{width: progress + \"%\"}}\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React, { useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\nimport { motion } from 'framer-motion';\r\nconst UploadForm = () => {\r\n\r\n    const [file,setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const types = ['image/png','/image/jpg', 'image/gif', 'image/jpeg'];\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n\r\n        if(selected && types.includes(selected.type)){\r\n            setFile(selected);\r\n            setError(\"\");\r\n        }\r\n        else {\r\n            setFile(null);\r\n            setError(\"Please select an image file: png, jpeg, gif, jpg are allowed\");\r\n        }\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <label>\r\n                <input type = \"file\" onChange={changeHandler}/>\r\n                <span>+</span>\r\n            </label>\r\n            <div className=\"output\">\r\n                {error && <div className = \"error\">{error}</div>}\r\n                {file&& <div>{file.name}</div>}\r\n                {file && <ProgressBar  file = {file} setFile = {setFile}/>}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UploadForm;","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = projectFirestore.collection(collection)\r\n        .orderBy(\"createdAt\", \"desc\")\r\n        .onSnapshot((snap) => {\r\n            let documents = [];\r\n            snap.forEach(doc => {\r\n                documents.push({...doc.data(), id: doc.id})\r\n            });\r\n            setDocs(documents);\r\n        });\r\n\r\n        return () => unsub();\r\n\r\n    }, [collection])\r\n\r\n    return {docs};\r\n}\r\n\r\nexport default useFirestore;","import React from \"react\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\nimport {motion} from \"framer-motion\";\r\n\r\nconst ImageGrid = ({setSelectedImg}) => {\r\n\r\n    const {docs} = useFirestore(\"images\");\r\n    console.log(docs)\r\n\r\n    return (\r\n        <div className = \"img-grid\">\r\n            {docs && docs.map(doc => (\r\n                <motion.div className = \"img-wrap\" key ={doc.id}\r\n                layout\r\n                whileHover = {{opacity: 1}}\r\n                onClick = {() => setSelectedImg(doc.url)}\r\n                >\r\n                    <motion.img src = {doc.url} alt = \"uploaded pic\"\r\n                    initial = {{opacity: 0}}\r\n                    animate = {{opacity: 1}}\r\n                    transition = {{delay: 1}}\r\n                    />\r\n\r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid;","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Modal = ({selectedImg, setSelectedImg}) => {\r\n\r\n    const handleClick = (e) => {\r\n        if (e.target.classList.contains(\"backdrop\")) {\r\n            setSelectedImg(null);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <motion.div className = \"backdrop\" onClick = {handleClick}\r\n        initial = {{opacity: 0}}\r\n        animate={{opacity: 1}}\r\n        >\r\n            <motion.img src = {selectedImg} alt=\"enlarged pic\"\r\n            initial={{y: \"-100vh\"}}\r\n            animate={{y: 0}}\r\n            />\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from 'react';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm'\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\nimport { useState } from 'react';\nfunction App() {\n\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm/>\n      <ImageGrid setSelectedImg = {setSelectedImg}/>\n      {selectedImg &&<Modal selectedImg = {selectedImg} setSelectedImg = {setSelectedImg}/>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}